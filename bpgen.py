#!/usr/bin/env python3
# -*- coding: utf8 -*-
################################################################################
##
## Copyright (C) 2012 Typhos
##
## This Source Code Form is subject to the terms of the Mozilla Public
## License, v. 2.0. If a copy of the MPL was not distributed with this
## file, You can obtain one at http://mozilla.org/MPL/2.0/.
##
################################################################################

import argparse
import re
import sys
import time

import yaml

AutogenHeader = """
/*
 * This file is AUTOMATICALLY GENERATED. DO NOT EDIT.
 * Generated at %s.
 */

""" % (time.strftime("%c"))

def make_selector(name):
    # For colored text things... as a TODO we could replace all non-valid chars
    # with e.g. their ord() numbers
    name = name.replace("!", "_excl_")
    return ".bpmotes-%s" % (name.lstrip("/"))

class Emote(object):
    def __init__(self, filename, name, properties, css):
        props = properties.copy()
        assert name.startswith("/")

        self.filename = filename
        self.name = name.lower()
        self.css = css
        self.ignore = props.pop("Ignore", False)
        self.nsfw = props.pop("NSFW", False)
        self.nomap = props.pop("NoMap", False)
        self.selector = props.pop("Selector", make_selector(self.name))
        self.css.update(props.pop("CSS", {}))

        for (key, val) in props.items():
            print("WARNING: Unknown key %r on %s in %s (= %r)" % (key, name, filename, val))

def process_spritesheet(filename, image_url, emotes):
    all_emotes = []

    for (name, props) in emotes.items():
        (width, height, x_pos, y_pos) = props.pop("Positioning")
        css = {
            "display": "block",
            "clear": "none",
            "float": "left",
            "background-image": "url(%s)" % (image_url),
            "width": px(width),
            "height": px(height),
            "background-position": "%s %s" % (px(x_pos), px(y_pos))
            }
        all_emotes.append(Emote(filename, name, props, css))

    return all_emotes

def px(s):
    return "%spx" % (s)

def process_file(filename, data):
    all_emotes = []

    for (image_url, emotes) in data.pop("Spritesheets", {}).items():
        all_emotes.extend(process_spritesheet(filename, image_url, emotes))

    for (name, props) in data.pop("Custom", {}).items():
        all_emotes.append(Emote(filename, name, props, {}))

    for section in data:
        print("WARNING: Unknown section %s in %s" % (section, filename))

    return all_emotes

def build_data(emotes):
    css_rules = {}
    nsfw_css_rules = {}
    js_map = {}

    for emote in emotes:
        if emote.ignore:
            continue

        rules = nsfw_css_rules if emote.nsfw else css_rules
        assert emote.selector not in rules
        rules[emote.selector] = emote.css.copy()

        if not emote.nomap:
            assert emote.name not in js_map
            js_map[emote.name] = emote.selector.lstrip(".")

    return css_rules, nsfw_css_rules, js_map

def dump_css(file, rules):
    file.write(AutogenHeader)

    for (selectors, properties) in rules.items():
        file.write("%s\n" % (format_rule(selectors, properties)))

def format_rule(selector, properties):
    for (key, val) in properties.items():
        if not isinstance(val, str):
            raise ValueError("non-string key", key)

    props_string = "; ".join(("%s: %s" % (prop, value)) for (prop, value) in properties.items())
    return "%s { %s }" % (selector, props_string)

def dump_js(file, map):
    file.write(AutogenHeader)
    file.write("var emote_map = {\n")

    strings = ["    %r: %r" % (emote.lower(), css_class.lstrip(".")) for (emote, css_class) in map.items()]
    file.write(",\n".join(strings))

    file.write("\n}\n")

def main2():
    parser = argparse.ArgumentParser(description="Generates BetterPonymotes's data files from a set of YAML inputs")
    parser.add_argument("--css", help="Output CSS file", type=argparse.FileType("w"), default="emote-classes.css")
    parser.add_argument("--nsfw", help="Output NSFW CSS file", type=argparse.FileType("w"), default="nsfw-emote-classes.css")
    parser.add_argument("--js", help="Output JS file", type=argparse.FileType("w"), default="emote-map.js")
    parser.add_argument("yaml", help="Input YAML files", type=argparse.FileType("r"), nargs="+")
    args = parser.parse_args()

    emotes = []

    for file in args.yaml:
        emotes.extend(process_file(file.name, yaml.load(file)))

    css_rules, nsfw_css_rules, js_map = build_data(emotes)

    dump_css(args.css, css_rules)
    dump_css(args.nsfw, nsfw_css_rules)
    dump_js(args.js, js_map)

if __name__ == "__main__":
    main2()
