Emote search/picker:
  - Fix it for the new emote-map changes.
    - Consider how nsfw emotes will work with this- will the standard CSS
      catch them? We may need to ensure bpm-nsfw gets applied.
    - Speaking of applying CSS, think about ensuring the core emote code
      doesn't touch it. Either that or make sure it does- might be simpler.

  - Make search an "and" for everything in spaces. Either that or an "or".
    Maybe even an option; I dunno. Search syntax would probably be overkill.

  - Prefs for its position/size. Make icons icons. Esc button to close.

General TODO:
  - Find a better way to handle data files (including emote-map.js) in Opera.
    "make" and file.read() is awful.

    This will probably come down to external hosting. There will most likely
    be *no* other solution when we get to a userscript variant, anyway.

  - Move the www files to /bpm/ or something. Rename betterponymotes.update.rdf
    to firefox-updates.rdf for consistency. Basically just move everything a
    level deeper over the course of an update.

  - Rework tooling a bit, mainly update.py and updatehelper.py. Keep a YAML
    file containing a list of subreddits and such, along with any special
    instructions, e.g. "-e".
    - Expand bpextract.py to include more extraction options. Add an ExtractionContext
      (or similar) object to manage global options and things. At a minimum
      I'd like --no-ignore (to search through PONYSCRIPT-IGNORE blocks) and -e
      to extract specific emotes from r/mlplounge.

      Maybe just -e? --no-ignore doesn't do anything useful on its own except
      generate too much noise.
    - Add options to control logging, and omit/include specific warnings. Most
      of them would generally be enabled by default, but we might want to ignore
      certain properties for certain subreddits (we don't need to use them
      globally, then). E.g. require "display: none" by default, but add a option
      like --ignore-prop=display.

  - See if there's any way to listen for localStorage writes on Chrome and Opera.
    Essentially this boils down to finding a way to signal from options.html
    to index.html/background.js, which in theory should be possible.

    After that we can consider sending updated prefs to the content scripts (we
    already can from Fx), and think about implementing hot-reloading again.

Misc:
  - Make bpextract/bpgen share as much code as possible. Make formal objects for
    EVERYTHING, with strictly-validating create/save/load methods.

  - Replace all setAttribute() calls with actual attributes...

Update process:
  - $ bin/version.py set -v [...]
  - $ rm build/*.{xpi,crx,oex} # Delete old versions
  - $ make
